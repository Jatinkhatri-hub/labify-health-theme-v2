{{ 'main-collection-product-grid.css' | asset_url | stylesheet_tag }}
{{ 'product-card.css' | asset_url | stylesheet_tag }}

{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }

  @font-face {
    font-family: 'Avenir Regular';
    src: url('{{'avenirRegular.woff2' | asset_url}}');
  }

  @font-face {
    font-family: 'Avenir Medium';
    src: url('{{'avenirMedium.woff2' |  asset_url}}')
  }

  @font-face {
    font-family: 'Avenir Bold';
    src: url('{{'avenir-bold.woff2' | asset_url}}');
  }

  @font-face {
    font-family: 'Avenir Light';
    src: url('{{'avenir-light.woff2' | asset_url}}');
  }


{%- endstyle -%}

{% comment %} {% assign product = section.settings.product %} {% endcomment %}

<div class="section-{{ section.id }}-padding gradient color-{{ section.settings.section_color_scheme }} custom-section review-section">
  <div class="page-width color-{{ section.settings.color_scheme }} review-section filter-page-width">
    <div class="main-grid__filter-wrapper">
    <form id="filter-form">
      {%- for filter in collection.filters -%}
        <details>
          <summary>
            <div class="main-grid__filter-box">
              <span>{{ filter.label }}</span>
              {% render 'icon-dropdown' %}
              {% comment %} {%- if filter.active_values.size > 0 -%}
                <span>({{ filter.active_values.size }})</span>
              {%- endif -%} {% endcomment %}
            </div>
          </summary>

          <div class="filter-box__dropdown-menu-wrapper">
            {% comment %} <div>
              <p>{{ filter.active_values.size }} selected</p>
              {%- if filter.active_values.size > 0 -%}
                <p>
                  <a href="{{ filter.url_to_remove }}">Reset</a>
                </p>
              {%- endif -%}
            </div> {% endcomment %}
            {%- case filter.type -%}
              {%- when 'boolean' -%}
                <ul>
                  <li>
                    <label for="Filter-{{ filter.param_name }}-{{ filter.true_value.value }}">
                      <input
                        type="checkbox"
                        name="{{ filter.param_name }}"
                        value="{{ filter.true_value.value }}"
                        id="Filter-{{ filter.param_name }}"
                        {% if filter.true_value.active -%}
                        checked{%- endif %}
                        {% if filter.true_value.count == 0 and filter.true_value.active == false -%}
                        disabled{%- endif -%}>{{ filter.true_value.label }}</label>
                  </li>
                  <li>
                    <label for="Filter-{{ filter.param_name }}-{{ filter.false_value.value }}">
                      <input
                        type="checkbox"
                        name="{{ filter.param_name }}"
                        value="{{ filter.false_value.value }}"
                        id="Filter-{{ filter.param_name }}"
                        {% if filter.false_value.active -%}
                        checked{%- endif %}
                        {% if filter.false_value.count == 0 and filter.false_value.active == false -%}
                        disabled{%- endif %}>{{ filter.false_value.label }}</label>
                  </li>
                </ul>

                <div>
                  <input type="submit" value="Apply">
                </div>
              {%- when 'list' -%}
                <ul class="filter-box__dropdown-menu">
                  {%- for filter_value in filter.values -%}
                    <li class="dropdown-menu__item">
                      <label class="dropdown-menu__item-lable" for="Filter-{{ filter.param_name }}-{{ forloop.index }}">
                        <input
                          type="checkbox"
                          name="{{ filter_value.param_name }}"
                          value="{{ filter_value.value }}"
                          id="Filter-{{ filter.param_name }}-{{ forloop.index }}"
                          {% if filter_value.active -%}
                          checked{%- endif %}
                          {% if filter_value.count == 0 and filter_value.active == false -%}
                          disabled{%- endif %}>
                        <span>
                          {%- case filter_value.display.type -%}
                            {%- when 'colors' -%}
                              {% liquid
                                assign size_limit = filter_value.display.value.size | at_most: 4
                                assign rotation = '0deg'
                                if size_limit == 2
                                  assign rotation = '45deg'
                                endif

                                assign angle_increment = 360 | divided_by: size_limit
                                assign angle = 0
                              %}
                              {%- capture conic_gradient -%}
                            {%- for color in filter_value.display.value limit: size_limit -%}
                              {{ color }} {{ angle }}deg{%- assign angle = angle | plus: angle_increment %} {{ angle }}deg{%- unless forloop.last %}, {%- endunless -%}
                            {%- endfor -%}
                          {%- endcapture -%}
                              <span style="
                            width: 25px;
                            height: 25px;
                            border-radius: 50%;
                            display: flex;
                            justify-content: center;
                            align-items: center;
                            background: conic-gradient({{ conic_gradient }}); transform: rotateZ({{ rotation }});
                          ">
                            </span>
                            {%- when 'image' -%}
                              {{
                                filter_value.display.value | image_url: width: 25 | image_tag: alt: filter_value.display.value.alt
                              }}
                            {%- else -%}
                              <span class="visual-display__child"></span>
                          {%- endcase -%}
                        </span>
                        {{ filter_value.label }}
                      </label>
                    </li>
                  {%- endfor -%}
                </ul>

                {% comment %} <div>
                  <input type="submit" value="Apply">
                </div> {% endcomment %}
              {%- when 'price_range' -%}
                <div class="filter-group-display__price-range">
                  <div class="filter-group-display__price-range-from">
                    <span>{{ cart.currency.symbol }}</span>

                    <input
                      name="{{ filter.min_value.param_name }}"
                      id="Filter-{{ filter.min_value.param_name }}"
                      {% if filter.min_value.value -%}
                      value="{{ filter.min_value.value | money_without_currency | replace: ',', '' }}"
                      {%- endif %}
                      type="number"
                      placeholder="0"
                      min="0"
                      max="{{ filter.range_max | money_without_currency | replace: ',', '' }}">

                    <label for="Filter-{{ filter.min_value.param_name }}">From</label>
                  </div>
                  <div class="filter-group-display__price-range-to">
                    <span>{{ cart.currency.symbol }}</span>

                    <input
                      name="{{ filter.max_value.param_name }}"
                      id="Filter-{{ filter.max_value.param_name }}"
                      {% if filter.max_value.value -%}
                      value="{{ filter.max_value.value | money_without_currency | replace: ',', '' }}"
                      {%- endif %}
                      type="number"
                      placeholder="{{ filter.range_max | money_without_currency | replace: ',', '' }}"
                      min="0"
                      max="{{ filter.range_max | money_without_currency | replace: ',', '' }}">

                    <label for="Filter-{{ filter.max_value.param_name }}">To</label>
                  </div>
                </div>

                <div class="filter-group-display__submit">
                  <input type="submit" value="Apply">
                </div>
            {%- endcase -%}
          </div>
        </details>
      {%- endfor -%}

      {% comment %} <details class="selected__filter-box">
        <summary>
          <a href="{{ collection.url }}?sort_by={{ collection.sort_by }}">All</a>
        </summary>

        {%- for filter in collection.filters -%}
          {%- if filter.type == "price_range" -%}
            {%- if filter.min_value.value != nil or filter.max_value.value != nil -%}
              <p>
                <a href="{{ filter.url_to_remove }}">
                  {%- assign min_value = filter.min_value.value | default: 0 -%}
                  {%- assign max_value = filter.max_value.value | default: filter.range_max -%}
                  {{ min_value | money }} - {{ max_value | money }} X
                </a>
              </p>
            {%- endif -%}
          {%- else -%}
          <div>
            {%- for filter_value in filter.active_values -%}
              <p>
                <a href="{{ filter_value.url_to_remove }}">
                  {{ filter.label }}: {{ filter_value.label }} X
                </a>
              </p>
            {%- endfor -%}
          </div>
          {%- endif -%}
        {%- endfor -%}
      </details>  {% endcomment %}
    </form>
      <div class="selected-filters-dropdown mobile">
        <button class="dropdown-toggle">Selected Filters </button>
          {% render 'icon-dropdown-arrow' %} 
          <div class="dropdown-menu">

          </div>
      </div> 
  </div>
    <div class="collection-grid-and-filter">
      <div class="selected-filters-desktop"></div>
      <div class="main-collection-product-grid"> 
        {% for product in collection.products %} 
          {% render 'product-card', product: product %}
        {% endfor %}
      </div>
    </div>


  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const filterForm = document.getElementById('filter-form');
    const dropdownMenu = document.querySelector('.selected-filters-dropdown .dropdown-menu');
  const dropdownToggle = document.querySelector('.selected-filters-dropdown .dropdown-toggle');
  

    // Attach event listeners to all filter inputs
    filterForm.querySelectorAll('input').forEach(function (input) {
      input.addEventListener('change', function () {
        applyFilters();
      });
    });

    function applyFilters() {
      const formData = new FormData(filterForm);

      // Fetch the collection with the applied filters using AJAX
      fetch(window.location.href.split('?')[0] + '?' + new URLSearchParams(formData).toString(), {
        method: 'GET',
        headers: {
          'X-Requested-With': 'XMLHttpRequest',
        },
      })
        .then(response => response.text())
        .then(html => {
          // Replace the collection product grid with the new filtered content
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, 'text/html');
          const newContent = doc.querySelector('.main-collection-product-grid'); // Adjust selector based on your theme
          const currentContent = document.querySelector('.main-collection-product-grid'); // Adjust selector based on your theme
          
          if (newContent && currentContent) {
            currentContent.innerHTML = newContent.innerHTML;
          }
        })
        .catch(error => console.error('Error applying filters:', error));
    }

   
  // Function to update the selected filters in the dropdown menu
  function updateSelectedFilters() {
    const selectedOptions = filterForm.querySelectorAll('input[type="checkbox"]:checked, input[type="radio"]:checked');
    dropdownMenu.innerHTML = ''; // Clear previous options
  

    selectedOptions.forEach(option => {
      // Retrieve label text associated with the selected option
      const labelElement = option.closest('label'); // Gets the closest label element
      const optionLabel = labelElement ? labelElement.textContent.trim() : option.value; // Get the label text or value
      
      // Create button-like option
      const button = document.createElement('button');
      button.className = 'button-like';
      button.textContent = optionLabel;
      button.dataset.name = option.name;
      button.dataset.value = option.value;

      // Add event listener to filter products when clicked
      button.addEventListener('click', function () {
        applySelectedFilter(button.dataset.name, button.dataset.value);
        dropdownToggle.textContent = optionLabel; // Update toggle button text with the selected option
        // Highlight the active button
        dropdownMenu.querySelectorAll('.button-like').forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
        dropdownMenu.style.display = 'none'; // Hide the dropdown after selection
      });

      dropdownMenu.appendChild(button); // Add the button to the dropdown menu
      

    });

    // Set the toggle button text based on the first selected option (or a default message)
    if (selectedOptions.length > 0) {
      const firstLabelElement = selectedOptions[0].closest('label');
      const firstOptionLabel = firstLabelElement ? firstLabelElement.textContent.trim() : selectedOptions[0].value;
      dropdownToggle.textContent = firstOptionLabel;
    } else {
      dropdownToggle.textContent = 'Selected Filters'; // Default text if no option is selected
    }
  }

  // Function to apply the selected filter from the dropdown
  function applySelectedFilter(filterName, filterValue) {
    const formData = new FormData();
    formData.append(filterName, filterValue); // Append the selected filter name and value

    // Include all other currently selected filters in the request
    filterForm.querySelectorAll('input[type="checkbox"]:checked, input[type="radio"]:checked').forEach(input => {
      if (input.name !== filterName) { // Skip the already selected filter from the dropdown
        formData.append(input.name, input.value);
      }
    });

    // Fetch filtered results using AJAX
    fetch(window.location.href.split('?')[0] + '?' + new URLSearchParams(formData).toString(), {
      method: 'GET',
      headers: {
        'X-Requested-With': 'XMLHttpRequest',
      },
    })
      .then(response => response.text())
      .then(html => {
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');
        const newContent = doc.querySelector('.main-collection-product-grid');
        const currentContent = document.querySelector('.main-collection-product-grid');

        if (newContent && currentContent) {
          currentContent.innerHTML = newContent.innerHTML;
        }
      })
      .catch(error => console.error('Error applying filter:', error));
  }

  // Initialize dropdown with any preselected filters on page load
  updateSelectedFilters();

  // Listen for changes in the filter form
  filterForm.addEventListener('change', updateSelectedFilters);

  // Toggle dropdown menu visibility
  dropdownToggle.addEventListener('click', function () {
    dropdownMenu.style.display = dropdownMenu.style.display === 'flex' ? 'none' : 'flex';
  });
  });
</script>



{% schema %}
  {
    "name": "t:sections.main-collection-product-grid.name",
    "class": "section",
    "settings": [
      {
        "type": "product",
        "id": "product",
        "label": "Product"
      },
      {
        "type": "color_scheme",
        "id": "section_color_scheme",
        "label": "t:sections.all.colors.label",
        "default": "scheme-1"
      },
      {
        "type": "color_scheme",
        "id": "color_scheme",
        "label": "t:sections.multirow.settings.container_color_scheme.label",
        "default": "scheme-1"
      },
      {
        "type": "range",
        "id": "padding_top",
        "min": 0,
        "max": 100,
        "step": 4,
        "unit": "px",
        "label": "t:sections.all.padding.padding_top",
        "default": 36
      }, {
        "type": "range",
        "id": "padding_bottom",
        "min": 0,
        "max": 100,
        "step": 4,
        "unit": "px",
        "label": "t:sections.all.padding.padding_bottom",
        "default": 36
      }
    ]
  }
{% endschema %}